package main

import (
	"flag"
	"fmt"
	"github.com/cheggaaa/pb"
	"io/ioutil"
	"math"
	"os"
)

var sBox = map[int]int {0x63: 0x52, 0x7c: 0x09, 0x77: 0x6a, 0x7b: 0xd5, 0xf2: 0x30, 0x6b: 0x36, 0x6f: 0xa5, 0xc5: 0x38, 0x30: 0xbf, 0x01: 0x40, 0x67: 0xa3, 0x2b: 0x9e, 0xfe: 0x81, 0xd7: 0xf3, 0xab: 0xd7, 0x76: 0xfb, 0xca: 0x7c, 0x82: 0xe3, 0xc9: 0x39, 0x7d: 0x82, 0xfa: 0x9b, 0x59: 0x2f, 0x47: 0xff, 0xf0: 0x87, 0xad: 0x34, 0xd4: 0x8e, 0xa2: 0x43, 0xaf: 0x44, 0x9c: 0xc4, 0xa4: 0xde, 0x72: 0xe9, 0xc0: 0xcb, 0xb7: 0x54, 0xfd: 0x7b, 0x93: 0x94, 0x26: 0x32, 0x36: 0xa6, 0x3f: 0xc2, 0xf7: 0x23, 0xcc: 0x3d, 0x34: 0xee, 0xa5: 0x4c, 0xe5: 0x95, 0xf1: 0x0b, 0x71: 0x42, 0xd8: 0xfa, 0x31: 0xc3, 0x15: 0x4e, 0x04: 0x08, 0xc7: 0x2e, 0x23: 0xa1, 0xc3: 0x66, 0x18: 0x28, 0x96: 0xd9, 0x05: 0x24, 0x9a: 0xb2, 0x07: 0x76, 0x12: 0x5b, 0x80: 0xa2, 0xe2: 0x49, 0xeb: 0x6d, 0x27: 0x8b, 0xb2: 0xd1, 0x75: 0x25, 0x09: 0x72, 0x83: 0xf8, 0x2c: 0xf6, 0x1a: 0x64, 0x1b: 0x86, 0x6e: 0x68, 0x5a: 0x98, 0xa0: 0x16, 0x52: 0xd4, 0x3b: 0xa4, 0xd6: 0x5c, 0xb3: 0xcc, 0x29: 0x5d, 0xe3: 0x65, 0x2f: 0xb6, 0x84: 0x92, 0x53: 0x6c, 0xd1: 0x70, 0x00: 0x48, 0xed: 0x50, 0x20: 0xfd, 0xfc: 0xed, 0xb1: 0xb9, 0x5b: 0xda, 0x6a: 0x5e, 0xcb: 0x15, 0xbe: 0x46, 0x39: 0x57, 0x4a: 0xa7, 0x4c: 0x8d, 0x58: 0x9d, 0xcf: 0x84, 0xd0: 0x90, 0xef: 0xd8, 0xaa: 0xab, 0xfb: 0x00, 0x43: 0x8c, 0x4d: 0xbc, 0x33: 0xd3, 0x85: 0x0a, 0x45: 0xf7, 0xf9: 0xe4, 0x02: 0x58, 0x7f: 0x05, 0x50: 0xb8, 0x3c: 0xb3, 0x9f: 0x45, 0xa8: 0x06, 0x51: 0xd0, 0xa3: 0x2c, 0x40: 0x1e, 0x8f: 0x8f, 0x92: 0xca, 0x9d: 0x3f, 0x38: 0x0f, 0xf5: 0x02, 0xbc: 0xc1, 0xb6: 0xaf, 0xda: 0xbd, 0x21: 0x03, 0x10: 0x01, 0xff: 0x13, 0xf3: 0x8a, 0xd2: 0x6b, 0xcd: 0x3a, 0x0c: 0x91, 0x13: 0x11, 0xec: 0x41, 0x5f: 0x4f, 0x97: 0x67, 0x44: 0xdc, 0x17: 0xea, 0xc4: 0x97, 0xa7: 0xf2, 0x7e: 0xcf, 0x3d: 0xce, 0x64: 0xf0, 0x5d: 0xb4, 0x19: 0xe6, 0x73: 0x73, 0x60: 0x96, 0x81: 0xac, 0x4f: 0x74, 0xdc: 0x22, 0x22: 0xe7, 0x2a: 0xad, 0x90: 0x35, 0x88: 0x85, 0x46: 0xe2, 0xee: 0xf9, 0xb8: 0x37, 0x14: 0xe8, 0xde: 0x1c, 0x5e: 0x75, 0x0b: 0xdf, 0xdb: 0x6e, 0xe0: 0x47, 0x32: 0xf1, 0x3a: 0x1a, 0x0a: 0x71, 0x49: 0x1d, 0x06: 0x29, 0x24: 0xc5, 0x5c: 0x89, 0xc2: 0x6f, 0xd3: 0xb7, 0xac: 0x62, 0x62: 0x0e, 0x91: 0xaa, 0x95: 0x18, 0xe4: 0xbe, 0x79: 0x1b, 0xe7: 0xfc, 0xc8: 0x56, 0x37: 0x3e, 0x6d: 0x4b, 0x8d: 0xc6, 0xd5: 0xd2, 0x4e: 0x79, 0xa9: 0x20, 0x6c: 0x9a, 0x56: 0xdb, 0xf4: 0xc0, 0xea: 0xfe, 0x65: 0x78, 0x7a: 0xcd, 0xae: 0x5a, 0x08: 0xf4, 0xba: 0x1f, 0x78: 0xdd, 0x25: 0xa8, 0x2e: 0x33, 0x1c: 0x88, 0xa6: 0x07, 0xb4: 0xc7, 0xc6: 0x31, 0xe8: 0xb1, 0xdd: 0x12, 0x74: 0x10, 0x1f: 0x59, 0x4b: 0x27, 0xbd: 0x80, 0x8b: 0xec, 0x8a: 0x5f, 0x70: 0x60, 0x3e: 0x51, 0xb5: 0x7f, 0x66: 0xa9, 0x48: 0x19, 0x03: 0xb5, 0xf6: 0x4a, 0x0e: 0x0d, 0x61: 0x2d, 0x35: 0xe5, 0x57: 0x7a, 0xb9: 0x9f, 0x86: 0x93, 0xc1: 0xc9, 0x1d: 0x9c, 0x9e: 0xef, 0xe1: 0xa0, 0xf8: 0xe0, 0x98: 0x3b, 0x11: 0x4d, 0x69: 0xae, 0xd9: 0x2a, 0x8e: 0xf5, 0x94: 0xb0, 0x9b: 0xc8, 0x1e: 0xeb, 0x87: 0xbb, 0xe9: 0x3c, 0xce: 0x83, 0x55: 0x53, 0x28: 0x99, 0xdf: 0x61, 0x8c: 0x17, 0xa1: 0x2b, 0x89: 0x04, 0x0d: 0x7e, 0xbf: 0xba, 0xe6: 0x77, 0x42: 0xd6, 0x68: 0x26, 0x41: 0xe1, 0x99: 0x69, 0x2d: 0x14, 0x0f: 0x63, 0xb0: 0x55, 0x54: 0x21, 0xbb: 0x0c, 0x16: 0x7d}
var sBoxI = map[int]int {0x52: 0x63, 0x09: 0x7c, 0x6a: 0x77, 0xd5: 0x7b, 0x30: 0xf2, 0x36: 0x6b, 0xa5: 0x6f, 0x38: 0xc5, 0xbf: 0x30, 0x40: 0x01, 0xa3: 0x67, 0x9e: 0x2b, 0x81: 0xfe, 0xf3: 0xd7, 0xd7: 0xab, 0xfb: 0x76, 0x7c: 0xca, 0xe3: 0x82, 0x39: 0xc9, 0x82: 0x7d, 0x9b: 0xfa, 0x2f: 0x59, 0xff: 0x47, 0x87: 0xf0, 0x34: 0xad, 0x8e: 0xd4, 0x43: 0xa2, 0x44: 0xaf, 0xc4: 0x9c, 0xde: 0xa4, 0xe9: 0x72, 0xcb: 0xc0, 0x54: 0xb7, 0x7b: 0xfd, 0x94: 0x93, 0x32: 0x26, 0xa6: 0x36, 0xc2: 0x3f, 0x23: 0xf7, 0x3d: 0xcc, 0xee: 0x34, 0x4c: 0xa5, 0x95: 0xe5, 0x0b: 0xf1, 0x42: 0x71, 0xfa: 0xd8, 0xc3: 0x31, 0x4e: 0x15, 0x08: 0x04, 0x2e: 0xc7, 0xa1: 0x23, 0x66: 0xc3, 0x28: 0x18, 0xd9: 0x96, 0x24: 0x05, 0xb2: 0x9a, 0x76: 0x07, 0x5b: 0x12, 0xa2: 0x80, 0x49: 0xe2, 0x6d: 0xeb, 0x8b: 0x27, 0xd1: 0xb2, 0x25: 0x75, 0x72: 0x09, 0xf8: 0x83, 0xf6: 0x2c, 0x64: 0x1a, 0x86: 0x1b, 0x68: 0x6e, 0x98: 0x5a, 0x16: 0xa0, 0xd4: 0x52, 0xa4: 0x3b, 0x5c: 0xd6, 0xcc: 0xb3, 0x5d: 0x29, 0x65: 0xe3, 0xb6: 0x2f, 0x92: 0x84, 0x6c: 0x53, 0x70: 0xd1, 0x48: 0x00, 0x50: 0xed, 0xfd: 0x20, 0xed: 0xfc, 0xb9: 0xb1, 0xda: 0x5b, 0x5e: 0x6a, 0x15: 0xcb, 0x46: 0xbe, 0x57: 0x39, 0xa7: 0x4a, 0x8d: 0x4c, 0x9d: 0x58, 0x84: 0xcf, 0x90: 0xd0, 0xd8: 0xef, 0xab: 0xaa, 0x00: 0xfb, 0x8c: 0x43, 0xbc: 0x4d, 0xd3: 0x33, 0x0a: 0x85, 0xf7: 0x45, 0xe4: 0xf9, 0x58: 0x02, 0x05: 0x7f, 0xb8: 0x50, 0xb3: 0x3c, 0x45: 0x9f, 0x06: 0xa8, 0xd0: 0x51, 0x2c: 0xa3, 0x1e: 0x40, 0x8f: 0x8f, 0xca: 0x92, 0x3f: 0x9d, 0x0f: 0x38, 0x02: 0xf5, 0xc1: 0xbc, 0xaf: 0xb6, 0xbd: 0xda, 0x03: 0x21, 0x01: 0x10, 0x13: 0xff, 0x8a: 0xf3, 0x6b: 0xd2, 0x3a: 0xcd, 0x91: 0x0c, 0x11: 0x13, 0x41: 0xec, 0x4f: 0x5f, 0x67: 0x97, 0xdc: 0x44, 0xea: 0x17, 0x97: 0xc4, 0xf2: 0xa7, 0xcf: 0x7e, 0xce: 0x3d, 0xf0: 0x64, 0xb4: 0x5d, 0xe6: 0x19, 0x73: 0x73, 0x96: 0x60, 0xac: 0x81, 0x74: 0x4f, 0x22: 0xdc, 0xe7: 0x22, 0xad: 0x2a, 0x35: 0x90, 0x85: 0x88, 0xe2: 0x46, 0xf9: 0xee, 0x37: 0xb8, 0xe8: 0x14, 0x1c: 0xde, 0x75: 0x5e, 0xdf: 0x0b, 0x6e: 0xdb, 0x47: 0xe0, 0xf1: 0x32, 0x1a: 0x3a, 0x71: 0x0a, 0x1d: 0x49, 0x29: 0x06, 0xc5: 0x24, 0x89: 0x5c, 0x6f: 0xc2, 0xb7: 0xd3, 0x62: 0xac, 0x0e: 0x62, 0xaa: 0x91, 0x18: 0x95, 0xbe: 0xe4, 0x1b: 0x79, 0xfc: 0xe7, 0x56: 0xc8, 0x3e: 0x37, 0x4b: 0x6d, 0xc6: 0x8d, 0xd2: 0xd5, 0x79: 0x4e, 0x20: 0xa9, 0x9a: 0x6c, 0xdb: 0x56, 0xc0: 0xf4, 0xfe: 0xea, 0x78: 0x65, 0xcd: 0x7a, 0x5a: 0xae, 0xf4: 0x08, 0x1f: 0xba, 0xdd: 0x78, 0xa8: 0x25, 0x33: 0x2e, 0x88: 0x1c, 0x07: 0xa6, 0xc7: 0xb4, 0x31: 0xc6, 0xb1: 0xe8, 0x12: 0xdd, 0x10: 0x74, 0x59: 0x1f, 0x27: 0x4b, 0x80: 0xbd, 0xec: 0x8b, 0x5f: 0x8a, 0x60: 0x70, 0x51: 0x3e, 0x7f: 0xb5, 0xa9: 0x66, 0x19: 0x48, 0xb5: 0x03, 0x4a: 0xf6, 0x0d: 0x0e, 0x2d: 0x61, 0xe5: 0x35, 0x7a: 0x57, 0x9f: 0xb9, 0x93: 0x86, 0xc9: 0xc1, 0x9c: 0x1d, 0xef: 0x9e, 0xa0: 0xe1, 0xe0: 0xf8, 0x3b: 0x98, 0x4d: 0x11, 0xae: 0x69, 0x2a: 0xd9, 0xf5: 0x8e, 0xb0: 0x94, 0xc8: 0x9b, 0xeb: 0x1e, 0xbb: 0x87, 0x3c: 0xe9, 0x83: 0xce, 0x53: 0x55, 0x99: 0x28, 0x61: 0xdf, 0x17: 0x8c, 0x2b: 0xa1, 0x04: 0x89, 0x7e: 0x0d, 0xba: 0xbf, 0x77: 0xe6, 0xd6: 0x42, 0x26: 0x68, 0xe1: 0x41, 0x69: 0x99, 0x14: 0x2d, 0x63: 0x0f, 0x55: 0xb0, 0x21: 0x54, 0x0c: 0xbb, 0x7d: 0x16}

func substitute(data *[]byte) {
	for i := 0; i < len(*data); i++ {
		(*data)[i] = byte(sBox[int((*data)[i])])
	}
}

func substituteInverse(data *[]byte) {
	for i := 0; i < len(*data); i++ {
		(*data)[i] = byte(sBoxI[int((*data)[i])])
	}
}

func xor(data *[]byte, key *[]byte) {
	for i := 0; i < len(*data); i++ {
		(*data)[i] ^= (*key)[i%len(*key)]
	}
}

func pad(data []byte, plen int) []byte {
	tmp := len(data) % plen
	nlen := plen - tmp

	if tmp == 0 { nlen = 0 }

	for i := 0; i < nlen; i++ {
		data = append(data, byte(0))
	}

	return data
}

func shuffle(key []byte) []byte {
	newKey := make([]byte, 0)
	key = pad(key, 16)

	for i := 0; i < len(key); i += 16 {
		newKey = append(newKey, []byte{
			key[i+4], key[i+8], key[i+12], key[i],
			key[i+9], key[i+13], key[i+1], key[i+5],
			key[i+10], key[i+14], key[i+2], key[i+6],
			key[i+7], key[i+11], key[i+15], key[i+3],
		}...)
	}

	return newKey
}

func keyExpansion(key []byte, roundCount int) []byte {
	newKey := make([]byte, 0)

	formula := func(i int) int { return (int(math.Pow(float64(i), 3)) + 3 * i) % 0xff }

	for i := 0; i < len(key); i++ {
		newKey = append(newKey, byte(sBox[formula(roundCount + int(key[i]))]))
	}

	return shuffle(newKey)
}

func encrypt(keyFile string, msgFile string, outputFile string, rounds int) {
	key, err := ioutil.ReadFile(keyFile)

	if err != nil {
		fmt.Println("Couldn't open key file!")
		os.Exit(-1)
	}

	if !contains(len(key), sizes) {
		fmt.Println("Invalid key size!")
		os.Exit(-4)
	}

	data, err := ioutil.ReadFile(msgFile)

	if err != nil {
		fmt.Println("Couldn't open input file!")
		os.Exit(-2)
	}

	bar := pb.StartNew(rounds)

	for i := 1; i <= rounds; i++ {
		roundKey := keyExpansion(key, i)

		substitute(&data)
		xor(&data, &roundKey)
		bar.Increment()
	}

	bar.Finish()

	err = ioutil.WriteFile(outputFile, data, 0644)

	if err != nil {
		fmt.Println("Couldn't write to file!")
	}
}

func decrypt(keyFile string, msgFile string, outputFile string, rounds int) {
	key, err := ioutil.ReadFile(keyFile)

	if err != nil {
		fmt.Println("Couldn't open key file!")
		os.Exit(-1)
	}

	if !contains(len(key), sizes) {
		fmt.Println("Invalid key size!")
		os.Exit(-4)
	}

	data, err := ioutil.ReadFile(msgFile)

	if err != nil {
		fmt.Println("Couldn't open input file!")
		os.Exit(-2)
	}

	bar := pb.StartNew(rounds)

	for i := 1; i <= rounds; i++ {
		roundKey := keyExpansion(key, rounds - i + 1)

		xor(&data, &roundKey)
		substituteInverse(&data)
		bar.Increment()
	}

	bar.Finish()

	err = ioutil.WriteFile(outputFile, data, 0644)

	if err != nil {
		fmt.Println("Couldn't write to file!")
	}
}

func main() {
	msgFile := flag.String("in", "", "Input file")
	keyFile := flag.String("key", "", "Key file")
	outFile := flag.String("out", "", "Output file")
	rounds := flag.Int("rounds", 4, "Number of rounds")
	decryptFlag := flag.Bool("decrypt", false, "Use this to decrypt")

	flag.Parse()

	if !isFlagPassed("in") || !isFlagPassed("key") || !isFlagPassed("out") {
		fmt.Printf("JCA %s\n\n", version)
		flag.PrintDefaults()
		os.Exit(0)
	}

	if *decryptFlag {
		decrypt(*keyFile, *msgFile, *outFile, *rounds)
	} else {
		encrypt(*keyFile, *msgFile, *outFile, *rounds)
	}
}